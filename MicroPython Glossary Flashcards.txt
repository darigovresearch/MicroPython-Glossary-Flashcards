<dt id="term-baremetal">baremetal</dt><dd><p>A system without a (full-fledged) operating system, for example an
<a class="reference internal" href="#term-MCU"><span class="xref std std-term">MCU</span></a>-based system. When running on a baremetal system,
MicroPython effectively functions like a small operating system,
running user programs and providing a command interpreter
(<a class="reference internal" href="#term-REPL"><span class="xref std std-term">REPL</span></a>).</p>
</dd>
<dt id="term-buffer-protocol">buffer protocol</dt><dd><p>Any Python object that can be automatically converted into bytes, such
as <code class="docutils literal notranslate"><span class="pre">bytes</span></code>, <code class="docutils literal notranslate"><span class="pre">bytearray</span></code>, <code class="docutils literal notranslate"><span class="pre">memoryview</span></code> and <code class="docutils literal notranslate"><span class="pre">str</span></code> objects, which
all implement the “buffer protocol”.</p>
</dd>
<dt id="term-board">board</dt><dd><p>Typically this refers to a printed circuit board (PCB) containing a
<a class="reference internal" href="#term-MCU"><span class="xref std std-term">microcontroller</span></a> and supporting components.
MicroPython firmware is typically provided per-board, as the firmware
contains both MCU-specific functionality but also board-level
functionality such as drivers or pin names.</p>
</dd>
<dt id="term-bytecode">bytecode</dt><dd><p>A compact representation of a Python program that generated by
compiling the Python source code. This is what the VM actually
executes. Bytecode is typically generated automatically at runtime and
is invisible to the user. Note that while <a class="reference internal" href="#term-CPython"><span class="xref std std-term">CPython</span></a> and
MicroPython both use bytecode, the format is different. You can also
pre-compile source code offline using the <a class="reference internal" href="#term-cross-compiler"><span class="xref std std-term">cross-compiler</span></a>.</p>
</dd>
<dt id="term-callee-owned-tuple">callee-owned tuple</dt><dd><p>This is a MicroPython-specific construct where, for efficiency
reasons, some built-in functions or methods may re-use the same
underlying tuple object to return data. This avoids having to allocate
a new tuple for every call, and reduces heap fragmentation. Programs
should not hold references to callee-owned tuples and instead only
extract data from them (or make a copy).</p>
</dd>
<dt id="term-CircuitPython">CircuitPython</dt><dd><p>A variant of MicroPython developed by <a class="reference external" href="https://circuitpython.org">Adafruit Industries</a>.</p>
</dd>
<dt id="term-CPython">CPython</dt><dd><p>CPython is the reference implementation of the Python programming
language, and the most well-known one. It is, however, one of many
implementations (including Jython, IronPython, PyPy, and MicroPython).
While MicroPython’s implementation differs substantially from CPython,
it aims to maintain as much compatibility as possible.</p>
</dd>
<dt id="term-cross-compiler">cross-compiler</dt><dd><p>Also known as <code class="docutils literal notranslate"><span class="pre">mpy-cross</span></code>. This tool runs on your PC and converts a
<a class="reference internal" href="#term-.py-file"><span class="xref std std-term">.py file</span></a> containing MicroPython code into a <a class="reference internal" href="#term-.mpy-file"><span class="xref std std-term">.mpy file</span></a>
containing MicroPython bytecode. This means it loads faster (the board
doesn’t have to compile the code), and uses less space on flash (the
bytecode is more space efficient).</p>
</dd>
<dt id="term-driver">driver</dt><dd><p>A MicroPython library that implements support for a particular
component, such as a sensor or display.</p>
</dd>
<dt id="term-FFI">FFI</dt><dd><p>Acronym for Foreign Function Interface. A mechanism used by the
<a class="reference internal" href="#term-MicroPython-Unix-port"><span class="xref std std-term">MicroPython Unix port</span></a> to access operating system functionality.
This is not available on <a class="reference internal" href="#term-baremetal"><span class="xref std std-term">baremetal</span></a> ports.</p>
</dd>
<dt id="term-filesystem">filesystem</dt><dd><p>Most MicroPython ports and boards provide a filesystem stored in flash
that is available to user code via the standard Python file APIs such
as <code class="docutils literal notranslate"><span class="pre">open()</span></code>. Some boards also make this internal filesystem
accessible to the host via USB mass-storage.</p>
</dd>
<dt id="term-frozen-module">frozen module</dt><dd><p>A Python module that has been cross compiled and bundled into the
firmware image. This reduces RAM requirements as the code is executed
directly from flash.</p>
</dd>
<dt id="term-Garbage-Collector">Garbage Collector</dt><dd><p>A background process that runs in Python (and MicroPython) to reclaim
unused memory in the <a class="reference internal" href="#term-heap"><span class="xref std std-term">heap</span></a>.</p>
</dd>
<dt id="term-GPIO">GPIO</dt><dd><p>General-purpose input/output. The simplest means to control electrical
signals (commonly referred to as “pins”) on a microcontroller. GPIO
typically allows pins to be either input or output, and to set or get
their digital value (logical “0” or “1”). MicroPython abstracts GPIO
access using the <a class="reference internal" href="../library/machine.Pin.html#machine.Pin" title="machine.Pin"><code class="xref py py-class docutils literal notranslate"><span class="pre">machine.Pin</span></code></a> and <a class="reference internal" href="../library/machine.Signal.html#machine.Signal" title="machine.Signal"><code class="xref py py-class docutils literal notranslate"><span class="pre">machine.Signal</span></code></a>
classes.</p>
</dd>
<dt id="term-GPIO-port">GPIO port</dt><dd><p>A group of <a class="reference internal" href="#term-GPIO"><span class="xref std std-term">GPIO</span></a> pins, usually based on hardware properties of
these pins (e.g. controllable by the same register).</p>
</dd>
<dt id="term-heap">heap</dt><dd><p>A region of RAM where MicroPython stores dynamic data. It is managed
automatically by the <a class="reference internal" href="#term-Garbage-Collector"><span class="xref std std-term">Garbage Collector</span></a>. Different MCUs and
boards have vastly different amounts of RAM available for the heap, so
this will affect how complex your program can be.</p>
</dd>
<dt id="term-interned-string">interned string</dt><dd><p>An optimisation used by MicroPython to improve the efficiency of
working with strings. An interned string is referenced by its (unique)
identity rather than its address and can therefore be quickly compared
just by its identifier. It also means that identical strings can be
de-duplicated in memory. String interning is almost always invisible to
the user.</p>
</dd>
<dt id="term-MCU">MCU</dt><dd><p>Microcontroller. Microcontrollers usually have much less resources
than a desktop, laptop, or phone, but are smaller, cheaper and
require much less power. MicroPython is designed to be small and
optimized enough to run on an average modern microcontroller.</p>
</dd>
<dt id="term-micropython-lib">micropython-lib</dt><dd><p>MicroPython is (usually) distributed as a single executable/binary
file with just few builtin modules. There is no extensive standard
library comparable with <a class="reference internal" href="#term-CPython"><span class="xref std std-term">CPython</span></a>’s. Instead, there is a related,
but separate project <a class="reference external" href="https://github.com/micropython/micropython-lib">micropython-lib</a> which provides
implementations for many modules from CPython’s standard library.</p>
<p>Some of the modules are are implemented in pure Python, and are able to
be used on all ports. However, the majority of these modules use
<a class="reference internal" href="#term-FFI"><span class="xref std std-term">FFI</span></a> to access operating system functionality, and as such can
only be used on the <a class="reference internal" href="#term-MicroPython-Unix-port"><span class="xref std std-term">MicroPython Unix port</span></a> (with limited support
for Windows).</p>
<p>Unlike the <a class="reference internal" href="#term-CPython"><span class="xref std std-term">CPython</span></a> stdlib, micropython-lib modules are
intended to be installed individually - either using manual copying or
using <a class="reference internal" href="#term-upip"><span class="xref std std-term">upip</span></a>.</p>
</dd>
<dt id="term-MicroPython-port">MicroPython port</dt><dd><p>MicroPython supports different <a class="reference internal" href="#term-board"><span class="xref std std-term">boards</span></a>, RTOSes, and
OSes, and can be relatively easily adapted to new systems. MicroPython
with support for a particular system is called a “port” to that
system. Different ports may have widely different functionality. This
documentation is intended to be a reference of the generic APIs
available across different ports (“MicroPython core”). Note that some
ports may still omit some APIs described here (e.g. due to resource
constraints). Any such differences, and port-specific extensions
beyond the MicroPython core functionality, would be described in the
separate port-specific documentation.</p>
</dd>
<dt id="term-MicroPython-Unix-port">MicroPython Unix port</dt><dd><p>The unix port is one of the major <a class="reference internal" href="#term-MicroPython-port"><span class="xref std std-term">MicroPython ports</span></a>. It is intended to run on POSIX-compatible
operating systems, like Linux, MacOS, FreeBSD, Solaris, etc. It also
serves as the basis of Windows port. The Unix port is very useful for
quick development and testing of the MicroPython language and
machine-independent features. It can also function in a similar way to
<a class="reference internal" href="#term-CPython"><span class="xref std std-term">CPython</span></a>’s <code class="docutils literal notranslate"><span class="pre">python</span></code> executable.</p>
</dd>
<dt id="term-.mpy-file">.mpy file</dt><dd><p>The output of the <a class="reference internal" href="#term-cross-compiler"><span class="xref std std-term">cross-compiler</span></a>. A compiled form of a
<a class="reference internal" href="#term-.py-file"><span class="xref std std-term">.py file</span></a> that contains MicroPython bytecode instead of Python
source code.</p>
</dd>
<dt id="term-native">native</dt><dd><p>Usually refers to “native code”, i.e. machine code for the target
microcontroller (such as ARM Thumb, Xtensa, x86/x64). The <code class="docutils literal notranslate"><span class="pre">&#64;native</span></code>
decorator can be applied to a MicroPython function to generate native
code instead of bytecode for that function, which will likely be
faster but use more RAM.</p>
</dd>
<dt id="term-port">port</dt><dd><p>Usually short for <a class="reference internal" href="#term-MicroPython-port"><span class="xref std std-term">MicroPython port</span></a>, but could also refer to
<a class="reference internal" href="#term-GPIO-port"><span class="xref std std-term">GPIO port</span></a>.</p>
</dd>
<dt id="term-.py-file">.py file</dt><dd><p>A file containing Python source code.</p>
</dd>
<dt id="term-REPL">REPL</dt><dd><p>An acronym for “Read, Eval, Print, Loop”. This is the interactive
Python prompt, useful for debugging or testing short snippets of code.
Most MicroPython boards make a REPL available over a UART, and this is
typically accessible on a host PC via USB.</p>
</dd>
<dt id="term-stream">stream</dt><dd><p>Also known as a “file-like object”. A Python object which provides
sequential read-write access to the underlying data. A stream object
implements a corresponding interface, which consists of methods like
<code class="docutils literal notranslate"><span class="pre">read()</span></code>, <code class="docutils literal notranslate"><span class="pre">write()</span></code>, <code class="docutils literal notranslate"><span class="pre">readinto()</span></code>, <code class="docutils literal notranslate"><span class="pre">seek()</span></code>, <code class="docutils literal notranslate"><span class="pre">flush()</span></code>,
<code class="docutils literal notranslate"><span class="pre">close()</span></code>, etc. A stream is an important concept in MicroPython;
many I/O objects implement the stream interface, and thus can be used
consistently and interchangeably in different contexts. For more
information on streams in MicroPython, see the <a class="reference internal" href="../library/uio.html#module-uio" title="uio: input/output streams"><code class="xref any py py-mod docutils literal notranslate"><span class="pre">uio</span></code></a> module.</p>
</dd>
<dt id="term-UART">UART</dt><dd><p>Acronym for “Universal Asynchronous Receiver/Transmitter”. This is a
peripheral that sends data over a pair of pins (TX &amp; RX). Many boards
include a way to make at least one of the UARTs available to a host PC
as a serial port over USB.</p>
</dd>
<dt id="term-upip">upip</dt><dd><p>(Literally, “micro pip”). A package manager for MicroPython, inspired
by <a class="reference internal" href="#term-CPython"><span class="xref std std-term">CPython</span></a>’s pip, but much smaller and with reduced
functionality.
upip runs both on the <a class="reference internal" href="#term-MicroPython-Unix-port"><span class="xref std std-term">Unix port</span></a> and on
<a class="reference internal" href="#term-baremetal"><span class="xref std std-term">baremetal</span></a> ports which offer filesystem and networking support.</p>
</dd>
